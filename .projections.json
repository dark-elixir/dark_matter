{
  "lib/**/views/*_view.ex": {
    "type": "view",
    "alternate": "test/{dirname}/views/{basename}_view_test.exs",
    "template": [
      "defmodule {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}View do",
      "  use {dirname|camelcase|capitalize}, :view",
      "end"
    ]
  },
  "test/**/views/*_view_test.exs": {
    "type": "test",
    "alternate": "lib/{dirname}/views/{basename}_view.ex",
    "template": [
      "defmodule {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}ViewTest do",
      "  @moduledoc false",
      "",
      "  use ExUnit.Case, async: true",
      "",
      "  alias {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}View",
      "end"
    ]
  },
  "lib/**/controllers/*_controller.ex": {
    "type": "controller",
    "alternate": "test/{dirname}/controllers/{basename}_controller_test.exs",
    "template": [
      "defmodule {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}Controller do",
      "  use {dirname|camelcase|capitalize}, :controller",
      "end"
    ]
  },
  "test/**/controllers/*_controller_test.exs": {
    "type": "test",
    "alternate": "lib/{dirname}/controllers/{basename}_controller.ex",
    "template": [
      "defmodule {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}ControllerTest do",
      "  @moduledoc false",
      "",
      "  use {dirname|camelcase|capitalize}.ConnCase, async: true",
      "end"
    ]
  },
  "lib/**/channels/*_channel.ex": {
    "type": "channel",
    "alternate": "test/{dirname}/channels/{basename}_channel_test.exs",
    "template": [
      "defmodule {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}Channel do",
      "  use {dirname|camelcase|capitalize}, :channel",
      "end"
    ]
  },
  "test/**/channels/*_channel_test.exs": {
    "type": "test",
    "alternate": "lib/{dirname}/channels/{basename}_channel.ex",
    "template": [
      "defmodule {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}ChannelTest do",
      "  @moduledoc false",
      "",
      "  use {dirname|camelcase|capitalize}.ChannelCase, async: true",
      "",
      "  alias {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}Channel",
      "end"
    ]
  },
  "lib/**/features/*_feature.ex": {
    "type": "feature",
    "alternate": "test/{dirname}/features/{basename}_feature_test.exs",
    "template": [
      "defmodule {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}Channel do",
      "  use {dirname|camelcase|capitalize}, :feature",
      "end"
    ]
  },
  "test/**/features/*_test.exs": {
    "type": "test",
    "alternate": "lib/{dirname}/features/{basename}_feature.ex",
    "template": [
      "defmodule {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}Test do",
      "  @moduledoc false",
      "",
      "  use {dirname|camelcase|capitalize}.FeatureCase, async: true",
      "end"
    ]
  },
  "lib/**/*.ex": {
    "type": "source",
    "alternate": "test/{dirname}/{basename}_test.exs",
    "template": ["defmodule {camelcase|capitalize|dot} do", "end"]
  },
  "test/**/*_test.exs": {
    "type": "test",
    "alternate": "lib/{dirname}/{basename}.ex",
    "template": [
      "defmodule {dirname|camelcase|capitalize|dot}Test do",
      "  @moduledoc false",
      "",
      "  use ExUnit.Case, async: true",
      "",
      "  alias {camelcase|capitalize|dot}",
      "end"
    ]
  },
  "lib/*.ex": { "alternate": "test/{}_test.exs" },
  "assets/js/*.js": { "alternate": "test/js/{}_test.js" },
  "apps/**/lib/**/*.ex": {
    "alternate": "apps/{dirname}/test/{dirname}/{basename}_test.exs"
  },
  "*.js": {
    "alternate": ["{dirname}/__test__/{basename}.test.js", "{}.test.js"]
  },
  "*.jsx": {
    "alternate": [
      "{dirname}/__test__/{basename}.test.jsx",
      "{dirname}/__test__/{basename}.test.js",
      "{}.test.jsx",
      "{}.test.js"
    ]
  },
  "src/*.js": { "alternate": "src/test/{}.test.js" },
  "src/*.jsx": { "alternate": "src/test/{}.test.jsx" },
  "src/*.ts": {
    "alternate": ["src/{dirname}/__test__/{basename}.test.ts", "src/{}.test.ts"]
  }
}
